#################################################
# Organization Web Server Deployment Playbook
#################################################
---
- hosts: localhost
  connection: local
  become: true
  become_user: root
  vars_files:
    - vars/default.yml
  vars_prompt:
    - name: admin_name
      prompt: "What is the new admins username?"
      private: no

    - name: admin_password
      prompt: "What is the new admins password?"

    - name: host_url
      prompt : "What is the host URL"
      private: no

    - name: smtp_user
      prompt: "What is your smtp account username?"
      private: no

    - name: smtp_pass
      prompt: "What is your smtp account password?"

  tasks:

    - name: Copy site deploy to server
      synchronize:
        mode: push
        src: ./site_deploy/
        dest: /srv/

    # system setup

    # uncomment the code below if you have any pre built docker images you want to pull in

    # - name: Pull default Docker image
    #   docker_image:
    #     name: "{{ default_container_image }}"
    #     source: pull

    # # Creates the number of containers defined by the variable create_containers, using values from vars file
    # - name: Create default containers
    #   docker_container:
    #     name: "{{ default_container_name }}{{ item }}"
    #     image: "{{ default_container_image }}"
    #     command: "{{ default_container_command }}"
    #     state: present
    #   with_sequence: count={{ create_containers }}
    
    - name: Create a 'admin' user
      user:
        name: "{{ admin_name }}"
        password: "{{ admin_password | password_hash('sha512') }}"
        groups:
          - sudo
        state: present
        shell: /bin/bash
        system: yes
        createhome: yes
        home: "/home/{{ admin_name }}"

    # - name: Set authorized ssh key taken for {{ admin_name }}
    #   authorized_key:
    #     user: "{{ admin_name }}"
    #     state: present
    #     key: "{{ ssh_pub_key }}"

    # Install dev tools
    - name: Install git
      apt: name=git state=latest

    # Setup git config for 'admin_name' user
    - name: Set git username
      command: git config --global user.name "{{ admin_name }}"

    - git_config:
        name: user.email
        scope: global
        value: "{{ admin_name }}@{{ host_url }}"

    # Install Docker
    - name: Install docker
      apt: name=docker state=latest

    # Install dev tools
    - name: Install docker-compose
      apt: name=docker-compose state=latest

    # container setup

    # grav
    - name: Build grav container image
      shell: docker build -t grav:latest .
      become: true
      become_user: root
      args:
        chdir: /srv/site_deploy/containers/grav

    # discourse
    - name: Copy discourse config
      copy:
        src: /srv/site_deploy/templates/discourse_docker/app.yml
        dest: /srv/site_deploy/containers/discourse_docker/containers/app.yml
        remote_src: yes

    - name: Set discourse config port
      replace:
        path: /srv/site_deploy/containers/discourse_docker/containers/app.yml
        regexp: '_discourse_port_'
        replace: '{{ discourse_port }}'
        backup: true

    - name: Set discourse config hostname
      replace:
        path: /srv/site_deploy/containers/discourse_docker/containers/app.yml
        regexp: '_discourse_hostname_'
        replace: '{{ discourse_sub_domain }}.{{ host_url }}'

    - name: Set discourse config admin email list
      replace:
        path: /srv/site_deploy/containers/discourse_docker/containers/app.yml
        regexp: '_discourse_admin_email_'
        replace: '{{ discourse_admin_email }}'
    
    - name: Set discourse config smtp server
      replace:
        path: /srv/site_deploy/containers/discourse_docker/containers/app.yml
        regexp: '_discourse_smtp_address_'
        replace: '{{ smtp_server }}'

    - name: Set discourse config smtp user
      replace:
        path: /srv/site_deploy/containers/discourse_docker/containers/app.yml
        regexp: '_discourse_smtp_user_'
        replace: '{{ smtp_user }}'

    - name: Set discourse config smtp password
      replace:
        path: /srv/site_deploy/containers/discourse_docker/containers/app.yml
        regexp: '_discourse_smtp_password_'
        replace: '{{ smtp_pass }}'

    # mailcow
    - name: Copy mailcow.conf
      copy:
        src: /srv/site_deploy/templates/mailcow-dockerized/mailcow.conf
        dest: /srv/site_deploy/containers/mailcow-dockerized/mailcow.conf
        remote_src: yes

    - name: Set mailcow fqdn
      replace:
        path: /srv/site_deploy/containers/mailcow-dockerized/mailcow.conf
        regexp: '_fqdn_mailcow_url_'
        replace: '{{ fqdn_sub_domain }}.{{ host_url }}'
        backup: true

    - name: Set mailcow db password
      replace:
        path: /srv/site_deploy/containers/mailcow-dockerized/mailcow.conf
        regexp: '_mailcow_db_pass_'
        replace: "{{ lookup('password', '/dev/null length=25 chars=ascii_letters') }}"
        backup: true

    - name: Set mailcow db root password
      replace:
        path: /srv/site_deploy/containers/mailcow-dockerized/mailcow.conf
        regexp: '_mailcow_db_root_'
        replace: "{{ lookup('password', '/dev/null length=25 chars=ascii_letters') }}"
        backup: true
   
    - name: Set mailcow http port
      replace:
        path: /srv/site_deploy/containers/mailcow-dockerized/mailcow.conf
        regexp: 'HTTP_PORT=80'
        replace: 'HTTP_PORT=8086'
        backup: true

    - name: Disable mailcow unnecessary https port
      replace:
        path: /srv/site_deploy/containers/mailcow-dockerized/mailcow.conf
        regexp: 'HTTPS_PORT=443'
        replace: '# HTTPS_PORT=443'
    
    - name: Disable mailcow unnecessary https port binding
      replace:
        path: /srv/site_deploy/containers/mailcow-dockerized/mailcow.conf
        regexp: 'HTTPS_BIND=0.0.0.0'
        replace: '# HTTPS_BIND=0.0.0.0'

    # caddy
    - name: Copy mailcow.conf
      copy:
        src: /srv/site_deploy/templates/caddy/Caddyfile
        dest: /srv/site_deploy/cfg/caddy/Caddyfile
        remote_src: yes

    - name: Set caddyfile host url
      replace:
        path: /srv/site_deploy/cfg/caddy/Caddyfile
        regexp: '_host_url_'
        replace: '{{ host_url }}'
        backup: true

    - name: Set caddyfile grav subdomain
      replace:
        path: /srv/site_deploy/cfg/caddy/Caddyfile
        regexp: '_grav_sub_domain_'
        replace: '{{ grav_sub_domain }}'

    - name: Set caddyfile mailcow subdomain
      replace:
        path: /srv/site_deploy/cfg/caddy/Caddyfile
        regexp: '_fqdn_sub_domain_'
        replace: '{{ fqdn_sub_domain }}'

    - name: Set caddyfile discourse subdomain
      replace:
        path: /srv/site_deploy/cfg/caddy/Caddyfile
        regexp: '_discourse_sub_domain_'
        replace: '{{ discourse_sub_domain }}'

    - name: Copy caddy systemd service
      copy:
        src: /srv/site_deploy/bin/caddy/caddy.service
        dest: /etc/systemd/system
        remote_src: yes

    - name: reload systemd unit configuration
      command: systemctl daemon-reload

    - debug:
        msg: Deployment has completed